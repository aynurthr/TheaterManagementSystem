@using Newtonsoft.Json;
@model Theater.Domain.Models.DTOs.DashboardResponseDto
@{
    ViewData["Title"] = "Dashboard";
}

<h1>Dashboard</h1>

<div class="row">
    <div class="col-md-12">
        <h3>Upcoming Show Date</h3>
        <table class="table table-striped">
            <tbody>
                <tr>
                    <th>Poster</th>
                    <td>@Model.UpcomingShowDate.PosterTitle</td>
                </tr>
                <tr>
                    <th>Date</th>
                    <td>@Model.UpcomingShowDate.Date.ToString("dd MMM yyyy h:mm tt")</td>
                </tr>
                <tr>
                    <th>Sold Tickets</th>
                    <td>@Model.UpcomingShowDate.SoldTickets</td>
                </tr>
                <tr>
                    <th>Unsold Tickets</th>
                    <td>@Model.UpcomingShowDate.UnsoldTickets</td>
                </tr>
                <tr>
                    <th>Revenue</th>
                    <td>@Model.UpcomingShowDate.Revenue.ToString("C")</td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="col-md-12">
        <h3 class="mt-3">The Most Popular Shows</h3>
        <p>The statistics are based on the amount of revenue the show has created, and it also includes the amount of sold and unsold tickets for that show.</p>
        <div class="row justify-content-center">
            <div class="col-md-6">
                <canvas id="bestShowDatesTicketsChart"></canvas>
            </div>
            <div class="col-md-6">
                <canvas id="bestShowDatesRevenueChart"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-12">
        <h3 class="mt-5">The Least Popular Shows</h3>
        <p>The statistics are based on the amount of potential revenue the show could have created, and it also includes the amount of sold and unsold tickets for that show.</p>
        <div class="row justify-content-center">
            <div class="col-md-6">
                <canvas id="worstShowDatesTicketsChart"></canvas>
            </div>
            <div class="col-md-6">
                <canvas id="worstShowDatesRevenueChart"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-12">
        <h3 class="mt-5">Monthly Revenue (Last 6 Months)</h3>
        <canvas id="monthlyRevenueChart"></canvas>
    </div>
    <div class="col-md-12">
        <h3 class="mt-5">Users</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>User</th>
                    <th>Role</th>
                    <th>Tickets Bought</th>
                    <th>Revenue</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var roleGroup in Model.UsersWithRoles.GroupBy(u => u.Role).OrderByDescending(g => g.Count()))
                {
                    var firstUser = roleGroup.FirstOrDefault();
                    var firstUserTicketData = Model.UsersWithRoles.FirstOrDefault(utd => utd.UserName == firstUser.UserName);
                    <tr>
                        <td rowspan="@roleGroup.Count()"><strong>@(roleGroup.Key ?? "No Role") (@roleGroup.Count())</strong></td>
                        <td>@firstUser.UserName</td>
                        <td>@(firstUserTicketData?.TicketsBought ?? 0)</td>
                        <td>@(firstUserTicketData?.Revenue.ToString("C") ?? "$0.00")</td>
                    </tr>
                    @foreach (var user in roleGroup.Skip(1))
                    {
                        var userTicketData = Model.UsersWithRoles.FirstOrDefault(utd => utd.UserName == user.UserName);
                        <tr>
                            <td>@user.UserName</td>
                            <td>@(userTicketData?.TicketsBought ?? 0)</td>
                            <td>@(userTicketData?.Revenue.ToString("C") ?? "$0.00")</td>
                        </tr>
                    }
                }
            </tbody>

        </table>
    </div>
    <div class="col-md-12 d-flex flex-column">
        <h3 class="mt-5">Revenue Distribution by User</h3>
        <div class="d-flex justify-content-center w-100">
            <div style="width: 400px; height: 400px;">
                <canvas id="userRevenueChart"></canvas>
            </div>
        </div>
    </div>
</div>

@section addjs {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // User Revenue Pie Chart
        var userRevenueCtx = document.getElementById('userRevenueChart').getContext('2d');
        var userRevenueChart = new Chart(userRevenueCtx, {
            type: 'pie',
            data: {
                labels: @Html.Raw(JsonConvert.SerializeObject(Model.UsersWithRoles.Select(utd => utd.UserName))),
                datasets: [{
                    label: 'Revenue ($)',
                    data: @Html.Raw(JsonConvert.SerializeObject(Model.UsersWithRoles.Select(utd => utd.Revenue))),
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: true,
                        position: 'bottom'
                    }
                }
            }
        });

       
        // Best Show Dates - Tickets
        var bestShowDatesTicketsCtx = document.getElementById('bestShowDatesTicketsChart').getContext('2d');
        var bestShowDatesTicketsChart = new Chart(bestShowDatesTicketsCtx, {
            type: 'bar',
            data: {
                labels: @Html.Raw(JsonConvert.SerializeObject(Model.BestShowDates.Select(s => s.PosterTitle + "\n(" + s.Date.ToString("dd MMM yyyy h:mm tt") + ")"))),
                datasets: [{
                    label: 'Sold Tickets',
                    data: @Html.Raw(JsonConvert.SerializeObject(Model.BestShowDates.Select(s => s.SoldTickets))),
                    backgroundColor: '#36A2EB'
                }, {
                    label: 'Unsold Tickets',
                    data: @Html.Raw(JsonConvert.SerializeObject(Model.BestShowDates.Select(s => s.UnsoldTickets))),
                    backgroundColor: '#FF6384'
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        stacked: true
                    },
                    y: {
                        stacked: true
                    }
                }
            }
        });

        // Best Show Dates - Revenue
        var bestShowDatesRevenueCtx = document.getElementById('bestShowDatesRevenueChart').getContext('2d');
        var bestShowDatesRevenueChart = new Chart(bestShowDatesRevenueCtx, {
            type: 'bar',
            data: {
                labels: @Html.Raw(JsonConvert.SerializeObject(Model.BestShowDates.Select(s => s.PosterTitle + "\n(" + s.Date.ToString("dd MMM yyyy h:mm tt") + ")"))),
                datasets: [{
                    label: 'Revenue ($)',
                    data: @Html.Raw(JsonConvert.SerializeObject(Model.BestShowDates.Select(s => s.Revenue))),
                    backgroundColor: '#4BC0C0'
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        stacked: false
                    },
                    y: {
                        stacked: false,
                        ticks: {
                            callback: function (value, index, values) {
                                return '$' + value.toFixed(2);
                            }
                        }
                    }
                }
            }
        });

        // Worst Show Dates - Tickets
        var worstShowDatesTicketsCtx = document.getElementById('worstShowDatesTicketsChart').getContext('2d');
        var worstShowDatesTicketsChart = new Chart(worstShowDatesTicketsCtx, {
            type: 'bar',
            data: {
                labels: @Html.Raw(JsonConvert.SerializeObject(Model.WorstShowDates.Select(s => s.PosterTitle + "\n(" + s.Date.ToString("dd MMM yyyy h:mm tt") + ")"))),
                datasets: [{
                    label: 'Sold Tickets',
                    data: @Html.Raw(JsonConvert.SerializeObject(Model.WorstShowDates.Select(s => s.SoldTickets))),
                    backgroundColor: '#36A2EB'
                }, {
                    label: 'Unsold Tickets',
                    data: @Html.Raw(JsonConvert.SerializeObject(Model.WorstShowDates.Select(s => s.UnsoldTickets))),
                    backgroundColor: '#FF6384'
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        stacked: true
                    },
                    y: {
                        stacked: true
                    }
                }
            }
        });

        // Worst Show Dates - Potential Revenue
        var worstShowDatesRevenueCtx = document.getElementById('worstShowDatesRevenueChart').getContext('2d');
        var worstShowDatesRevenueChart = new Chart(worstShowDatesRevenueCtx, {
            type: 'bar',
            data: {
                labels: @Html.Raw(JsonConvert.SerializeObject(Model.WorstShowDates.Select(s => s.PosterTitle + "\n(" + s.Date.ToString("dd MMM yyyy h:mm tt") + ")"))),
                datasets: [{
                    label: 'Potential Revenue ($)',
                    data: @Html.Raw(JsonConvert.SerializeObject(Model.WorstShowDates.Select(s => s.Revenue))),
                    backgroundColor: '#FFA726'
                }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        stacked: false
                    },
                    y: {
                        stacked: false,
                        ticks: {
                            callback: function (value, index, values) {
                                return '$' + value.toFixed(2);
                            }
                        }
                    }
                }
            }
        });

        // Monthly Revenue (Last 6 Months)
        var monthlyRevenueCtx = document.getElementById('monthlyRevenueChart').getContext('2d');
        var monthlyRevenueChart = new Chart(monthlyRevenueCtx, {
            type: 'bar',
            data: {
                labels: @Html.Raw(JsonConvert.SerializeObject(Model.MonthlyRevenue.Select(m => m.Month.ToString("00") + '-' + m.Year))),
                datasets: [
                    {
                        type: 'line',
                        label: 'Revenue ($)',
                        data: @Html.Raw(JsonConvert.SerializeObject(Model.MonthlyRevenue.Select(m => m.Revenue))),
                        borderColor: '#FF6384',
                        fill: false,
                        yAxisID: 'y2',
                    },
                    {
                        type: 'bar',
                        label: 'Tickets Sold',
                        data: @Html.Raw(JsonConvert.SerializeObject(Model.MonthlyTicketsSold.Select(m => m.TicketsSold))),
                        backgroundColor: '#36A2EB',
                        yAxisID: 'y1',
                    }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        beginAtZero: true,
                    },
                    y1: {
                        type: 'linear',
                        position: 'left',
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Tickets Sold'
                        }
                    },
                    y2: {
                        type: 'linear',
                        position: 'right',
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Revenue ($)'
                        },
                        grid: {
                            drawOnChartArea: false
                        },
                        ticks: {
                            callback: function (value, index, values) {
                                return '$' + value.toFixed(2);
                            }
                        }
                    }
                }
            }
        });
    </script>
}
